import { useFela } from "react-fela";
import { Column } from "../../../../../../components/Flex";
import { IconWrapper } from "../../../../../../components/Icons/IconWrapper";
import { MenuButtonWideFill } from "../../../../../../components/Icons/MenuButtonWideFill";
import { SectionHeader } from "../../components/SectionHeader";
import { Lead } from "../../components/Lead";
import { Link } from "../../../../../../components/Link/Link";
import { PlusIcon } from "../../../../../../components/Icons/PlusIcon";
import { PlusAsteriskIcon } from "../../../../../../components/Icons/PlusAsteriskIcon";
import { ClipboardButton } from "../../components/CodeSnippet/ClipboardButton";
import { ColumnHeader } from "../../components/ColumnHeader";
import { BodyParagraph } from "../../components/Body";
import { CodeSnippet } from "../../components/CodeSnippet/CodeSnippet";
import { Highlight } from "../../components/CodeSnippet/Highlight";

export const Description = () => (
  <p>
    Use Bootstrap&apos;s utility API to modify any of our included utilities or
    create your own custom utilities for any project. Import Bootstrap first,
    then use Sass map functions to modify, add, or remove utilities.
  </p>
);

const createPropertyWithValue = ({
  property,
  value,
}: {
  property: string;
  value: string;
}) => ({
  tokens: [
    {
      token: "     ",
      isKey: false,
      isValue: false,
    },
    {
      token: property,
      isKey: true,
      isValue: false,
    },
    {
      token: " ",
      isKey: false,
      isValue: false,
    },
    {
      token: ":",
      isKey: false,
      isValue: false,
    },
    {
      token: value,
      isKey: false,
      isValue: true,
    },
    {
      token: ",",
      isKey: false,
      isValue: false,
    },
  ],
});
const createNewline = () => ({
  tokens: [{ token: "\n", isKey: false, isValue: false }],
});

export const UtilityApiDetails = () => {
  const { css } = useFela();
  const cx = `${css({ marginBottom: "3rem" })} utility-api-details`;
  return (
    <Column className={cx}>
      <IconWrapper>
        <MenuButtonWideFill />
      </IconWrapper>

      <PlusIcon />
      <IconWrapper>
        <PlusAsteriskIcon />
      </IconWrapper>

      <SectionHeader as="h2" className="utility-api-section-header">
        Components, meet the Utility API
      </SectionHeader>
      <Lead>
        New in Bootstrap 5, our utilities are now generated by our{" "}
        <Link href="/docs/5.3/utilities/api/">Utility API</Link>. We built it as
        a feature-packed Sass map that can be quickly and easily customized.
        It&apos;s never been easier to add, remove, or modify any utility
        classes. Make utilities responsive, add pseudo-class variants, and give
        them custom names.
      </Lead>
    </Column>
  );
};

export const ExtendUtilitiesSnippet = () => {
  return (
    <CodeSnippet>
      <ClipboardButton />
      <Highlight
        language="scss"
        data-lang="scss"
        lines={[
          {
            tokens: [
              {
                token: "@import",
                isKey: false,
                isValue: false,
              },
              {
                token: " ",
                isKey: false,
                isValue: false,
              },
              {
                token: '"bootstrap/scss/bootstrap"',
                isKey: false,
                isValue: false,
              },
              {
                token: ";",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          {
            tokens: [
              {
                token: "$utilities",
                isKey: false,
                isValue: false,
              },
              {
                token: ":",
                isKey: false,
                isValue: false,
              },
              {
                token: " ",
                isKey: false,
                isValue: false,
              },
              {
                token: "\n",
                isKey: false,
                isValue: false,
              },
              {
                token: "map-merge",
                isKey: false,
                isValue: false,
              },
              {
                token: "(",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          {
            tokens: [
              {
                token: " ",
                isKey: false,
                isValue: false,
              },
              {
                token: "$utilities",
                isKey: false,
                isValue: false,
              },
              {
                token: ",",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          {
            tokens: [
              {
                token: " ",
                isKey: false,
                isValue: false,
              },
              {
                token: "(",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          {
            tokens: [
              {
                token: "   ",
                isKey: false,
                isValue: false,
              },
              {
                token: '"cursor"',
                isKey: false,
                isValue: false,
              },
              {
                token: ":",
                isKey: false,
                isValue: false,
              },
              {
                token: " ",
                isKey: false,
                isValue: false,
              },
              {
                token: "(",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          createPropertyWithValue({ property: "property", value: "cursor" }),
          { tokens: [{ token: "\n", isKey: false, isValue: false }] },
          createPropertyWithValue({ property: "class", value: "cursor" }),
          { tokens: [{ token: "\n", isKey: false, isValue: false }] },
          createPropertyWithValue({ property: "responsive", value: "true" }),
          { tokens: [{ token: "\n", isKey: false, isValue: false }] },
          createPropertyWithValue({
            property: "values",
            value: "auto pointer grab",
          }),
          { tokens: [{ token: "\n", isKey: false, isValue: false }] },
          {
            tokens: [
              {
                token: "   ",
                isKey: false,
                isValue: false,
              },
              {
                token: ")",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          {
            tokens: [
              {
                token: " ",
                isKey: false,
                isValue: false,
              },
              {
                token: ")",
                isKey: false,
                isValue: false,
              },
            ],
          },
          createNewline(),
          {
            tokens: [
              {
                token: ");",
                isKey: false,
                isValue: false,
              },
            ],
          },
        ]}
      ></Highlight>
    </CodeSnippet>
  );
};

export const ExtendUtilities = () => {
  return (
    <Column lg={6} className="extend-utilities-column">
      <ColumnHeader as="h3" className="utility-api-details-header-extend">
        Create and extend utilities
      </ColumnHeader>
      <Description />
      <ExtendUtilitiesSnippet />
      <BodyParagraph
        className="utility-api-body"
        href="/docs/5.3/utilities/api/"
        linkText="Explore the utility API"
      />
    </Column>
  );
};
